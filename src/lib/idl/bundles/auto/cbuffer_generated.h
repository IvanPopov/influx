// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CBUFFER_H_
#define FLATBUFFERS_GENERATED_CBUFFER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "type_generated.h"

struct CBBundle;
struct CBBundleBuilder;
struct CBBundleT;

struct CBBundleT : public flatbuffers::NativeTable {
  typedef CBBundle TableType;
  std::string name{};
  uint32_t slot = 0;
  uint32_t size = 0;
  std::vector<std::unique_ptr<TypeFieldT>> fields{};
  CBBundleT() = default;
  CBBundleT(const CBBundleT &o);
  CBBundleT(CBBundleT&&) FLATBUFFERS_NOEXCEPT = default;
  CBBundleT &operator=(CBBundleT o) FLATBUFFERS_NOEXCEPT;
};

struct CBBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CBBundleT NativeTableType;
  typedef CBBundleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SLOT = 6,
    VT_SIZE = 8,
    VT_FIELDS = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t slot() const {
    return GetField<uint32_t>(VT_SLOT, 0);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<TypeField>> *fields() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TypeField>> *>(VT_FIELDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_SLOT, 4) &&
           VerifyField<uint32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_FIELDS) &&
           verifier.VerifyVector(fields()) &&
           verifier.VerifyVectorOfTables(fields()) &&
           verifier.EndTable();
  }
  CBBundleT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CBBundleT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CBBundle> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CBBundleT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CBBundleBuilder {
  typedef CBBundle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CBBundle::VT_NAME, name);
  }
  void add_slot(uint32_t slot) {
    fbb_.AddElement<uint32_t>(CBBundle::VT_SLOT, slot, 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(CBBundle::VT_SIZE, size, 0);
  }
  void add_fields(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TypeField>>> fields) {
    fbb_.AddOffset(CBBundle::VT_FIELDS, fields);
  }
  explicit CBBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CBBundle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CBBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<CBBundle> CreateCBBundle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t slot = 0,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TypeField>>> fields = 0) {
  CBBundleBuilder builder_(_fbb);
  builder_.add_fields(fields);
  builder_.add_size(size);
  builder_.add_slot(slot);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CBBundle> CreateCBBundleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t slot = 0,
    uint32_t size = 0,
    const std::vector<flatbuffers::Offset<TypeField>> *fields = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto fields__ = fields ? _fbb.CreateVector<flatbuffers::Offset<TypeField>>(*fields) : 0;
  return CreateCBBundle(
      _fbb,
      name__,
      slot,
      size,
      fields__);
}

flatbuffers::Offset<CBBundle> CreateCBBundle(flatbuffers::FlatBufferBuilder &_fbb, const CBBundleT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CBBundleT::CBBundleT(const CBBundleT &o)
      : name(o.name),
        slot(o.slot),
        size(o.size) {
  fields.reserve(o.fields.size());
  for (const auto &fields_ : o.fields) { fields.emplace_back((fields_) ? new TypeFieldT(*fields_) : nullptr); }
}

inline CBBundleT &CBBundleT::operator=(CBBundleT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(slot, o.slot);
  std::swap(size, o.size);
  std::swap(fields, o.fields);
  return *this;
}

inline CBBundleT *CBBundle::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CBBundleT>(new CBBundleT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CBBundle::UnPackTo(CBBundleT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = slot(); _o->slot = _e; }
  { auto _e = size(); _o->size = _e; }
  { auto _e = fields(); if (_e) { _o->fields.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->fields[_i] = std::unique_ptr<TypeFieldT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<CBBundle> CBBundle::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CBBundleT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCBBundle(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CBBundle> CreateCBBundle(flatbuffers::FlatBufferBuilder &_fbb, const CBBundleT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CBBundleT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _slot = _o->slot;
  auto _size = _o->size;
  auto _fields = _o->fields.size() ? _fbb.CreateVector<flatbuffers::Offset<TypeField>> (_o->fields.size(), [](size_t i, _VectorArgs *__va) { return CreateTypeField(*__va->__fbb, __va->__o->fields[i].get(), __va->__rehasher); }, &_va ) : 0;
  return CreateCBBundle(
      _fbb,
      _name,
      _slot,
      _size,
      _fields);
}

#endif  // FLATBUFFERS_GENERATED_CBUFFER_H_
