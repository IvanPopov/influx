// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TypeField, TypeFieldT } from './type-field';


export class TypeLayout {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TypeLayout {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTypeLayout(bb:flatbuffers.ByteBuffer, obj?:TypeLayout):TypeLayout {
  return (obj || new TypeLayout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTypeLayout(bb:flatbuffers.ByteBuffer, obj?:TypeLayout):TypeLayout {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TypeLayout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fields(index: number, obj?:TypeField):TypeField|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TypeField()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

length():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startTypeLayout(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fieldsOffset, 0);
}

static createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldInt32(1, length, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldInt32(3, size, 0);
}

static endTypeLayout(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTypeLayout(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset, length:number, nameOffset:flatbuffers.Offset, size:number):flatbuffers.Offset {
  TypeLayout.startTypeLayout(builder);
  TypeLayout.addFields(builder, fieldsOffset);
  TypeLayout.addLength(builder, length);
  TypeLayout.addName(builder, nameOffset);
  TypeLayout.addSize(builder, size);
  return TypeLayout.endTypeLayout(builder);
}

unpack(): TypeLayoutT {
  return new TypeLayoutT(
    this.bb!.createObjList(this.fields.bind(this), this.fieldsLength()),
    this.length(),
    this.name(),
    this.size()
  );
}


unpackTo(_o: TypeLayoutT): void {
  _o.fields = this.bb!.createObjList(this.fields.bind(this), this.fieldsLength());
  _o.length = this.length();
  _o.name = this.name();
  _o.size = this.size();
}
}

export class TypeLayoutT {
constructor(
  public fields: (TypeFieldT)[] = [],
  public length: number = 0,
  public name: string|Uint8Array|null = null,
  public size: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fields = TypeLayout.createFieldsVector(builder, builder.createObjectOffsetList(this.fields));
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return TypeLayout.createTypeLayout(builder,
    fields,
    this.length,
    name,
    this.size
  );
}
}
