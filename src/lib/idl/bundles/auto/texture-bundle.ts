// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TypeLayout, TypeLayoutT } from './type-layout';


export class TextureBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextureBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextureBundle(bb:flatbuffers.ByteBuffer, obj?:TextureBundle):TextureBundle {
  return (obj || new TextureBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextureBundle(bb:flatbuffers.ByteBuffer, obj?:TextureBundle):TextureBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextureBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

slot():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

stride():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

type(obj?:TypeLayout):TypeLayout|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TypeLayout()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTextureBundle(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addSlot(builder:flatbuffers.Builder, slot:number) {
  builder.addFieldInt32(1, slot, 0);
}

static addStride(builder:flatbuffers.Builder, stride:number) {
  builder.addFieldInt32(2, stride, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, typeOffset, 0);
}

static endTextureBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TextureBundleT {
  return new TextureBundleT(
    this.name(),
    this.slot(),
    this.stride(),
    (this.type() !== null ? this.type()!.unpack() : null)
  );
}


unpackTo(_o: TextureBundleT): void {
  _o.name = this.name();
  _o.slot = this.slot();
  _o.stride = this.stride();
  _o.type = (this.type() !== null ? this.type()!.unpack() : null);
}
}

export class TextureBundleT {
constructor(
  public name: string|Uint8Array|null = null,
  public slot: number = 0,
  public stride: number = 0,
  public type: TypeLayoutT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const type = (this.type !== null ? this.type!.pack(builder) : 0);

  TextureBundle.startTextureBundle(builder);
  TextureBundle.addName(builder, name);
  TextureBundle.addSlot(builder, this.slot);
  TextureBundle.addStride(builder, this.stride);
  TextureBundle.addType(builder, type);

  return TextureBundle.endTextureBundle(builder);
}
}
