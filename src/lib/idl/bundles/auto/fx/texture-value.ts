// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class TextureValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextureValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextureValue(bb:flatbuffers.ByteBuffer, obj?:TextureValue):TextureValue {
  return (obj || new TextureValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextureValue(bb:flatbuffers.ByteBuffer, obj?:TextureValue):TextureValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextureValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTextureValue(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valueOffset, 0);
}

static endTextureValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTextureValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  TextureValue.startTextureValue(builder);
  TextureValue.addValue(builder, valueOffset);
  return TextureValue.endTextureValue(builder);
}

unpack(): TextureValueT {
  return new TextureValueT(
    this.value()
  );
}


unpackTo(_o: TextureValueT): void {
  _o.value = this.value();
}
}

export class TextureValueT {
constructor(
  public value: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const value = (this.value !== null ? builder.createString(this.value!) : 0);

  return TextureValue.createTextureValue(builder,
    value
  );
}
}
