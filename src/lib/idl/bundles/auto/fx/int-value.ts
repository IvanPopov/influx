// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class IntValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IntValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

value():number {
  return this.bb!.readInt32(this.bb_pos);
}

static sizeOf():number {
  return 4;
}

static createIntValue(builder:flatbuffers.Builder, value: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(value);
  return builder.offset();
}


unpack(): IntValueT {
  return new IntValueT(
    this.value()
  );
}


unpackTo(_o: IntValueT): void {
  _o.value = this.value();
}
}

export class IntValueT {
constructor(
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return IntValue.createIntValue(builder,
    this.value
  );
}
}
