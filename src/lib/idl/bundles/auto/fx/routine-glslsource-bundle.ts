// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CBBundle, CBBundleT } from '../cbbundle';
import { GLSLAttribute, GLSLAttributeT } from '../fx/glslattribute';


export class RoutineGLSLSourceBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RoutineGLSLSourceBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRoutineGLSLSourceBundle(bb:flatbuffers.ByteBuffer, obj?:RoutineGLSLSourceBundle):RoutineGLSLSourceBundle {
  return (obj || new RoutineGLSLSourceBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRoutineGLSLSourceBundle(bb:flatbuffers.ByteBuffer, obj?:RoutineGLSLSourceBundle):RoutineGLSLSourceBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RoutineGLSLSourceBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

attributes(index: number, obj?:GLSLAttribute):GLSLAttribute|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GLSLAttribute()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

attributesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cbuffers(index: number, obj?:CBBundle):CBBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CBBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cbuffersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRoutineGLSLSourceBundle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, codeOffset, 0);
}

static addAttributes(builder:flatbuffers.Builder, attributesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, attributesOffset, 0);
}

static createAttributesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttributesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCbuffers(builder:flatbuffers.Builder, cbuffersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, cbuffersOffset, 0);
}

static createCbuffersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCbuffersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRoutineGLSLSourceBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRoutineGLSLSourceBundle(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset, attributesOffset:flatbuffers.Offset, cbuffersOffset:flatbuffers.Offset):flatbuffers.Offset {
  RoutineGLSLSourceBundle.startRoutineGLSLSourceBundle(builder);
  RoutineGLSLSourceBundle.addCode(builder, codeOffset);
  RoutineGLSLSourceBundle.addAttributes(builder, attributesOffset);
  RoutineGLSLSourceBundle.addCbuffers(builder, cbuffersOffset);
  return RoutineGLSLSourceBundle.endRoutineGLSLSourceBundle(builder);
}

unpack(): RoutineGLSLSourceBundleT {
  return new RoutineGLSLSourceBundleT(
    this.code(),
    this.bb!.createObjList(this.attributes.bind(this), this.attributesLength()),
    this.bb!.createObjList(this.cbuffers.bind(this), this.cbuffersLength())
  );
}


unpackTo(_o: RoutineGLSLSourceBundleT): void {
  _o.code = this.code();
  _o.attributes = this.bb!.createObjList(this.attributes.bind(this), this.attributesLength());
  _o.cbuffers = this.bb!.createObjList(this.cbuffers.bind(this), this.cbuffersLength());
}
}

export class RoutineGLSLSourceBundleT {
constructor(
  public code: string|Uint8Array|null = null,
  public attributes: (GLSLAttributeT)[] = [],
  public cbuffers: (CBBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const attributes = RoutineGLSLSourceBundle.createAttributesVector(builder, builder.createObjectOffsetList(this.attributes));
  const cbuffers = RoutineGLSLSourceBundle.createCbuffersVector(builder, builder.createObjectOffsetList(this.cbuffers));

  return RoutineGLSLSourceBundle.createRoutineGLSLSourceBundle(builder,
    code,
    attributes,
    cbuffers
  );
}
}
