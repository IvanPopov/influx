// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Pass11BytecodeBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Pass11BytecodeBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPass11BytecodeBundle(bb:flatbuffers.ByteBuffer, obj?:Pass11BytecodeBundle):Pass11BytecodeBundle {
  return (obj || new Pass11BytecodeBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPass11BytecodeBundle(bb:flatbuffers.ByteBuffer, obj?:Pass11BytecodeBundle):Pass11BytecodeBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pass11BytecodeBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

codeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

codeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startPass11BytecodeBundle(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, codeOffset, 0);
}

static createCodeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endPass11BytecodeBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPass11BytecodeBundle(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Pass11BytecodeBundle.startPass11BytecodeBundle(builder);
  Pass11BytecodeBundle.addCode(builder, codeOffset);
  return Pass11BytecodeBundle.endPass11BytecodeBundle(builder);
}

unpack(): Pass11BytecodeBundleT {
  return new Pass11BytecodeBundleT(
    this.bb!.createScalarList(this.code.bind(this), this.codeLength())
  );
}


unpackTo(_o: Pass11BytecodeBundleT): void {
  _o.code = this.bb!.createScalarList(this.code.bind(this), this.codeLength());
}
}

export class Pass11BytecodeBundleT {
constructor(
  public code: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const code = Pass11BytecodeBundle.createCodeVector(builder, this.code);

  return Pass11BytecodeBundle.createPass11BytecodeBundle(builder,
    code
  );
}
}
