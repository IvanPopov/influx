// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class TrimeshBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrimeshBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrimeshBundle(bb:flatbuffers.ByteBuffer, obj?:TrimeshBundle):TrimeshBundle {
  return (obj || new TrimeshBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrimeshBundle(bb:flatbuffers.ByteBuffer, obj?:TrimeshBundle):TrimeshBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrimeshBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

vertexCountUName():string|null
vertexCountUName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
vertexCountUName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

faceCountUName():string|null
faceCountUName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
faceCountUName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

verticesName():string|null
verticesName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
verticesName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

facesName():string|null
facesName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
facesName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gsAdjecencyName():string|null
gsAdjecencyName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gsAdjecencyName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

faceAdjacencyName():string|null
faceAdjacencyName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
faceAdjacencyName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTrimeshBundle(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addVertexCountUName(builder:flatbuffers.Builder, vertexCountUNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, vertexCountUNameOffset, 0);
}

static addFaceCountUName(builder:flatbuffers.Builder, faceCountUNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, faceCountUNameOffset, 0);
}

static addVerticesName(builder:flatbuffers.Builder, verticesNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, verticesNameOffset, 0);
}

static addFacesName(builder:flatbuffers.Builder, facesNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, facesNameOffset, 0);
}

static addGsAdjecencyName(builder:flatbuffers.Builder, gsAdjecencyNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, gsAdjecencyNameOffset, 0);
}

static addFaceAdjacencyName(builder:flatbuffers.Builder, faceAdjacencyNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, faceAdjacencyNameOffset, 0);
}

static endTrimeshBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrimeshBundle(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, vertexCountUNameOffset:flatbuffers.Offset, faceCountUNameOffset:flatbuffers.Offset, verticesNameOffset:flatbuffers.Offset, facesNameOffset:flatbuffers.Offset, gsAdjecencyNameOffset:flatbuffers.Offset, faceAdjacencyNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrimeshBundle.startTrimeshBundle(builder);
  TrimeshBundle.addName(builder, nameOffset);
  TrimeshBundle.addVertexCountUName(builder, vertexCountUNameOffset);
  TrimeshBundle.addFaceCountUName(builder, faceCountUNameOffset);
  TrimeshBundle.addVerticesName(builder, verticesNameOffset);
  TrimeshBundle.addFacesName(builder, facesNameOffset);
  TrimeshBundle.addGsAdjecencyName(builder, gsAdjecencyNameOffset);
  TrimeshBundle.addFaceAdjacencyName(builder, faceAdjacencyNameOffset);
  return TrimeshBundle.endTrimeshBundle(builder);
}

unpack(): TrimeshBundleT {
  return new TrimeshBundleT(
    this.name(),
    this.vertexCountUName(),
    this.faceCountUName(),
    this.verticesName(),
    this.facesName(),
    this.gsAdjecencyName(),
    this.faceAdjacencyName()
  );
}


unpackTo(_o: TrimeshBundleT): void {
  _o.name = this.name();
  _o.vertexCountUName = this.vertexCountUName();
  _o.faceCountUName = this.faceCountUName();
  _o.verticesName = this.verticesName();
  _o.facesName = this.facesName();
  _o.gsAdjecencyName = this.gsAdjecencyName();
  _o.faceAdjacencyName = this.faceAdjacencyName();
}
}

export class TrimeshBundleT {
constructor(
  public name: string|Uint8Array|null = null,
  public vertexCountUName: string|Uint8Array|null = null,
  public faceCountUName: string|Uint8Array|null = null,
  public verticesName: string|Uint8Array|null = null,
  public facesName: string|Uint8Array|null = null,
  public gsAdjecencyName: string|Uint8Array|null = null,
  public faceAdjacencyName: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const vertexCountUName = (this.vertexCountUName !== null ? builder.createString(this.vertexCountUName!) : 0);
  const faceCountUName = (this.faceCountUName !== null ? builder.createString(this.faceCountUName!) : 0);
  const verticesName = (this.verticesName !== null ? builder.createString(this.verticesName!) : 0);
  const facesName = (this.facesName !== null ? builder.createString(this.facesName!) : 0);
  const gsAdjecencyName = (this.gsAdjecencyName !== null ? builder.createString(this.gsAdjecencyName!) : 0);
  const faceAdjacencyName = (this.faceAdjacencyName !== null ? builder.createString(this.faceAdjacencyName!) : 0);

  return TrimeshBundle.createTrimeshBundle(builder,
    name,
    vertexCountUName,
    faceCountUName,
    verticesName,
    facesName,
    gsAdjecencyName,
    faceAdjacencyName
  );
}
}
