// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BufferBundle, BufferBundleT } from '../fx/buffer-bundle';
import { TextureBundle, TextureBundleT } from '../fx/texture-bundle';
import { TrimeshBundle, TrimeshBundleT } from '../fx/trimesh-bundle';
import { UAVBundle, UAVBundleT } from '../fx/uavbundle';


export class RoutineBytecodeBundleResources {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RoutineBytecodeBundleResources {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRoutineBytecodeBundleResources(bb:flatbuffers.ByteBuffer, obj?:RoutineBytecodeBundleResources):RoutineBytecodeBundleResources {
  return (obj || new RoutineBytecodeBundleResources()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRoutineBytecodeBundleResources(bb:flatbuffers.ByteBuffer, obj?:RoutineBytecodeBundleResources):RoutineBytecodeBundleResources {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RoutineBytecodeBundleResources()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uavs(index: number, obj?:UAVBundle):UAVBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UAVBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

uavsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

buffers(index: number, obj?:BufferBundle):BufferBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BufferBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

buffersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

textures(index: number, obj?:TextureBundle):TextureBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new TextureBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

texturesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trimeshes(index: number, obj?:TrimeshBundle):TrimeshBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TrimeshBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trimeshesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRoutineBytecodeBundleResources(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUavs(builder:flatbuffers.Builder, uavsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uavsOffset, 0);
}

static createUavsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUavsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBuffers(builder:flatbuffers.Builder, buffersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, buffersOffset, 0);
}

static createBuffersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBuffersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTextures(builder:flatbuffers.Builder, texturesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, texturesOffset, 0);
}

static createTexturesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTexturesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrimeshes(builder:flatbuffers.Builder, trimeshesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, trimeshesOffset, 0);
}

static createTrimeshesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrimeshesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRoutineBytecodeBundleResources(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRoutineBytecodeBundleResources(builder:flatbuffers.Builder, uavsOffset:flatbuffers.Offset, buffersOffset:flatbuffers.Offset, texturesOffset:flatbuffers.Offset, trimeshesOffset:flatbuffers.Offset):flatbuffers.Offset {
  RoutineBytecodeBundleResources.startRoutineBytecodeBundleResources(builder);
  RoutineBytecodeBundleResources.addUavs(builder, uavsOffset);
  RoutineBytecodeBundleResources.addBuffers(builder, buffersOffset);
  RoutineBytecodeBundleResources.addTextures(builder, texturesOffset);
  RoutineBytecodeBundleResources.addTrimeshes(builder, trimeshesOffset);
  return RoutineBytecodeBundleResources.endRoutineBytecodeBundleResources(builder);
}

unpack(): RoutineBytecodeBundleResourcesT {
  return new RoutineBytecodeBundleResourcesT(
    this.bb!.createObjList(this.uavs.bind(this), this.uavsLength()),
    this.bb!.createObjList(this.buffers.bind(this), this.buffersLength()),
    this.bb!.createObjList(this.textures.bind(this), this.texturesLength()),
    this.bb!.createObjList(this.trimeshes.bind(this), this.trimeshesLength())
  );
}


unpackTo(_o: RoutineBytecodeBundleResourcesT): void {
  _o.uavs = this.bb!.createObjList(this.uavs.bind(this), this.uavsLength());
  _o.buffers = this.bb!.createObjList(this.buffers.bind(this), this.buffersLength());
  _o.textures = this.bb!.createObjList(this.textures.bind(this), this.texturesLength());
  _o.trimeshes = this.bb!.createObjList(this.trimeshes.bind(this), this.trimeshesLength());
}
}

export class RoutineBytecodeBundleResourcesT {
constructor(
  public uavs: (UAVBundleT)[] = [],
  public buffers: (BufferBundleT)[] = [],
  public textures: (TextureBundleT)[] = [],
  public trimeshes: (TrimeshBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const uavs = RoutineBytecodeBundleResources.createUavsVector(builder, builder.createObjectOffsetList(this.uavs));
  const buffers = RoutineBytecodeBundleResources.createBuffersVector(builder, builder.createObjectOffsetList(this.buffers));
  const textures = RoutineBytecodeBundleResources.createTexturesVector(builder, builder.createObjectOffsetList(this.textures));
  const trimeshes = RoutineBytecodeBundleResources.createTrimeshesVector(builder, builder.createObjectOffsetList(this.trimeshes));

  return RoutineBytecodeBundleResources.createRoutineBytecodeBundleResources(builder,
    uavs,
    buffers,
    textures,
    trimeshes
  );
}
}
