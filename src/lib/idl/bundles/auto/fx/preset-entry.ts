// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ColorValue, ColorValueT } from '../fx/color-value';
import { ControlValue, unionToControlValue, unionListToControlValue } from '../fx/control-value';
import { Float2Value, Float2ValueT } from '../fx/float2value';
import { Float3Value, Float3ValueT } from '../fx/float3value';
import { Float4Value, Float4ValueT } from '../fx/float4value';
import { FloatValue, FloatValueT } from '../fx/float-value';
import { IntValue, IntValueT } from '../fx/int-value';
import { MeshValue, MeshValueT } from '../fx/mesh-value';
import { TextureValue, TextureValueT } from '../fx/texture-value';
import { UintValue, UintValueT } from '../fx/uint-value';


export class PresetEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PresetEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPresetEntry(bb:flatbuffers.ByteBuffer, obj?:PresetEntry):PresetEntry {
  return (obj || new PresetEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPresetEntry(bb:flatbuffers.ByteBuffer, obj?:PresetEntry):PresetEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PresetEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

valueType():ControlValue {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ControlValue.NONE;
}

value<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startPresetEntry(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addValueType(builder:flatbuffers.Builder, valueType:ControlValue) {
  builder.addFieldInt8(1, valueType, ControlValue.NONE);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueOffset, 0);
}

static endPresetEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPresetEntry(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, valueType:ControlValue, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  PresetEntry.startPresetEntry(builder);
  PresetEntry.addName(builder, nameOffset);
  PresetEntry.addValueType(builder, valueType);
  PresetEntry.addValue(builder, valueOffset);
  return PresetEntry.endPresetEntry(builder);
}

unpack(): PresetEntryT {
  return new PresetEntryT(
    this.name(),
    this.valueType(),
    (() => {
      let temp = unionToControlValue(this.valueType(), this.value.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: PresetEntryT): void {
  _o.name = this.name();
  _o.valueType = this.valueType();
  _o.value = (() => {
      let temp = unionToControlValue(this.valueType(), this.value.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class PresetEntryT {
constructor(
  public name: string|Uint8Array|null = null,
  public valueType: ControlValue = ControlValue.NONE,
  public value: ColorValueT|Float2ValueT|Float3ValueT|Float4ValueT|FloatValueT|IntValueT|MeshValueT|TextureValueT|UintValueT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const value = builder.createObjectOffset(this.value);

  return PresetEntry.createPresetEntry(builder,
    name,
    this.valueType,
    value
  );
}
}
