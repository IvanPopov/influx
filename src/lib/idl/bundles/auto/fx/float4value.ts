// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Float4Value {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Float4Value {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

x():number {
  return this.bb!.readFloat32(this.bb_pos);
}

y():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
}

z():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
}

w():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
}

static sizeOf():number {
  return 16;
}

static createFloat4Value(builder:flatbuffers.Builder, x: number, y: number, z: number, w: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeFloat32(w);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
}


unpack(): Float4ValueT {
  return new Float4ValueT(
    this.x(),
    this.y(),
    this.z(),
    this.w()
  );
}


unpackTo(_o: Float4ValueT): void {
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.w = this.w();
}
}

export class Float4ValueT {
constructor(
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public w: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Float4Value.createFloat4Value(builder,
    this.x,
    this.y,
    this.z,
    this.w
  );
}
}
