// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BundleContent, unionToBundleContent, unionListToBundleContent } from '../fx/bundle-content';
import { BundleMeta, BundleMetaT } from '../fx/bundle-meta';
import { BundleSignature, BundleSignatureT } from '../fx/bundle-signature';
import { MatBundle, MatBundleT } from '../fx/mat-bundle';
import { PartBundle, PartBundleT } from '../fx/part-bundle';
import { Preset, PresetT } from '../fx/preset';
import { Technique11Bundle, Technique11BundleT } from '../fx/technique11bundle';
import { UIControl, UIControlT } from '../fx/uicontrol';


export class Bundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Bundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBundle(bb:flatbuffers.ByteBuffer, obj?:Bundle):Bundle {
  return (obj || new Bundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBundle(bb:flatbuffers.ByteBuffer, obj?:Bundle):Bundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Bundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

signature(obj?:BundleSignature):BundleSignature|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BundleSignature()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

meta(obj?:BundleMeta):BundleMeta|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new BundleMeta()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

contentType():BundleContent {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BundleContent.NONE;
}

content<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

controls(index: number, obj?:UIControl):UIControl|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new UIControl()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

controlsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

presets(index: number, obj?:Preset):Preset|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Preset()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

presetsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startBundle(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addSignature(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, signatureOffset, 0);
}

static addMeta(builder:flatbuffers.Builder, metaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, metaOffset, 0);
}

static addContentType(builder:flatbuffers.Builder, contentType:BundleContent) {
  builder.addFieldInt8(3, contentType, BundleContent.NONE);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, contentOffset, 0);
}

static addControls(builder:flatbuffers.Builder, controlsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, controlsOffset, 0);
}

static createControlsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startControlsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPresets(builder:flatbuffers.Builder, presetsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, presetsOffset, 0);
}

static createPresetsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPresetsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBundleBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedBundleBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): BundleT {
  return new BundleT(
    this.name(),
    (this.signature() !== null ? this.signature()!.unpack() : null),
    (this.meta() !== null ? this.meta()!.unpack() : null),
    this.contentType(),
    (() => {
      let temp = unionToBundleContent(this.contentType(), this.content.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.bb!.createObjList(this.controls.bind(this), this.controlsLength()),
    this.bb!.createObjList(this.presets.bind(this), this.presetsLength())
  );
}


unpackTo(_o: BundleT): void {
  _o.name = this.name();
  _o.signature = (this.signature() !== null ? this.signature()!.unpack() : null);
  _o.meta = (this.meta() !== null ? this.meta()!.unpack() : null);
  _o.contentType = this.contentType();
  _o.content = (() => {
      let temp = unionToBundleContent(this.contentType(), this.content.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.controls = this.bb!.createObjList(this.controls.bind(this), this.controlsLength());
  _o.presets = this.bb!.createObjList(this.presets.bind(this), this.presetsLength());
}
}

export class BundleT {
constructor(
  public name: string|Uint8Array|null = null,
  public signature: BundleSignatureT|null = null,
  public meta: BundleMetaT|null = null,
  public contentType: BundleContent = BundleContent.NONE,
  public content: MatBundleT|PartBundleT|Technique11BundleT|null = null,
  public controls: (UIControlT)[] = [],
  public presets: (PresetT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const signature = (this.signature !== null ? this.signature!.pack(builder) : 0);
  const meta = (this.meta !== null ? this.meta!.pack(builder) : 0);
  const content = builder.createObjectOffset(this.content);
  const controls = Bundle.createControlsVector(builder, builder.createObjectOffsetList(this.controls));
  const presets = Bundle.createPresetsVector(builder, builder.createObjectOffsetList(this.presets));

  Bundle.startBundle(builder);
  Bundle.addName(builder, name);
  Bundle.addSignature(builder, signature);
  Bundle.addMeta(builder, meta);
  Bundle.addContentType(builder, this.contentType);
  Bundle.addContent(builder, content);
  Bundle.addControls(builder, controls);
  Bundle.addPresets(builder, presets);

  return Bundle.endBundle(builder);
}
}
