// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CBBundle, CBBundleT } from '../cbbundle';
import { TextureBundle, TextureBundleT } from '../texture-bundle';
import { TypeLayout, TypeLayoutT } from '../type-layout';


export class VertexShader {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VertexShader {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVertexShader(bb:flatbuffers.ByteBuffer, obj?:VertexShader):VertexShader {
  return (obj || new VertexShader()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVertexShader(bb:flatbuffers.ByteBuffer, obj?:VertexShader):VertexShader {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VertexShader()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

crc32():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

entryName():string|null
entryName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entryName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

input(obj?:TypeLayout):TypeLayout|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TypeLayout()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

cbuffers(index: number, obj?:CBBundle):CBBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new CBBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cbuffersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

textures(index: number, obj?:TextureBundle):TextureBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TextureBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

texturesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startVertexShader(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addCrc32(builder:flatbuffers.Builder, crc32:number) {
  builder.addFieldInt32(0, crc32, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, codeOffset, 0);
}

static addEntryName(builder:flatbuffers.Builder, entryNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, entryNameOffset, 0);
}

static addInput(builder:flatbuffers.Builder, inputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, inputOffset, 0);
}

static addCbuffers(builder:flatbuffers.Builder, cbuffersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, cbuffersOffset, 0);
}

static createCbuffersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCbuffersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTextures(builder:flatbuffers.Builder, texturesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, texturesOffset, 0);
}

static createTexturesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTexturesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endVertexShader(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): VertexShaderT {
  return new VertexShaderT(
    this.crc32(),
    this.code(),
    this.entryName(),
    (this.input() !== null ? this.input()!.unpack() : null),
    this.bb!.createObjList(this.cbuffers.bind(this), this.cbuffersLength()),
    this.bb!.createObjList(this.textures.bind(this), this.texturesLength())
  );
}


unpackTo(_o: VertexShaderT): void {
  _o.crc32 = this.crc32();
  _o.code = this.code();
  _o.entryName = this.entryName();
  _o.input = (this.input() !== null ? this.input()!.unpack() : null);
  _o.cbuffers = this.bb!.createObjList(this.cbuffers.bind(this), this.cbuffersLength());
  _o.textures = this.bb!.createObjList(this.textures.bind(this), this.texturesLength());
}
}

export class VertexShaderT {
constructor(
  public crc32: number = 0,
  public code: string|Uint8Array|null = null,
  public entryName: string|Uint8Array|null = null,
  public input: TypeLayoutT|null = null,
  public cbuffers: (CBBundleT)[] = [],
  public textures: (TextureBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const code = (this.code !== null ? builder.createString(this.code!) : 0);
  const entryName = (this.entryName !== null ? builder.createString(this.entryName!) : 0);
  const input = (this.input !== null ? this.input!.pack(builder) : 0);
  const cbuffers = VertexShader.createCbuffersVector(builder, builder.createObjectOffsetList(this.cbuffers));
  const textures = VertexShader.createTexturesVector(builder, builder.createObjectOffsetList(this.textures));

  VertexShader.startVertexShader(builder);
  VertexShader.addCrc32(builder, this.crc32);
  VertexShader.addCode(builder, code);
  VertexShader.addEntryName(builder, entryName);
  VertexShader.addInput(builder, input);
  VertexShader.addCbuffers(builder, cbuffers);
  VertexShader.addTextures(builder, textures);

  return VertexShader.endVertexShader(builder);
}
}
