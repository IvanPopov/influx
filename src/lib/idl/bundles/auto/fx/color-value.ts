// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ColorValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ColorValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

r():number {
  return this.bb!.readUint8(this.bb_pos);
}

g():number {
  return this.bb!.readUint8(this.bb_pos + 1);
}

b():number {
  return this.bb!.readUint8(this.bb_pos + 2);
}

a():number {
  return this.bb!.readUint8(this.bb_pos + 3);
}

static sizeOf():number {
  return 4;
}

static createColorValue(builder:flatbuffers.Builder, r: number, g: number, b: number, a: number):flatbuffers.Offset {
  builder.prep(1, 4);
  builder.writeInt8(a);
  builder.writeInt8(b);
  builder.writeInt8(g);
  builder.writeInt8(r);
  return builder.offset();
}


unpack(): ColorValueT {
  return new ColorValueT(
    this.r(),
    this.g(),
    this.b(),
    this.a()
  );
}


unpackTo(_o: ColorValueT): void {
  _o.r = this.r();
  _o.g = this.g();
  _o.b = this.b();
  _o.a = this.a();
}
}

export class ColorValueT {
constructor(
  public r: number = 0,
  public g: number = 0,
  public b: number = 0,
  public a: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ColorValue.createColorValue(builder,
    this.r,
    this.g,
    this.b,
    this.a
  );
}
}
