// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class BundleSignature {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BundleSignature {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBundleSignature(bb:flatbuffers.ByteBuffer, obj?:BundleSignature):BundleSignature {
  return (obj || new BundleSignature()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBundleSignature(bb:flatbuffers.ByteBuffer, obj?:BundleSignature):BundleSignature {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BundleSignature()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mode():string|null
mode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

commithash():string|null
commithash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commithash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

branch():string|null
branch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
branch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timestamp():string|null
timestamp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timestamp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startBundleSignature(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addMode(builder:flatbuffers.Builder, modeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, modeOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, versionOffset, 0);
}

static addCommithash(builder:flatbuffers.Builder, commithashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commithashOffset, 0);
}

static addBranch(builder:flatbuffers.Builder, branchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, branchOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestampOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, timestampOffset, 0);
}

static endBundleSignature(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBundleSignature(builder:flatbuffers.Builder, modeOffset:flatbuffers.Offset, versionOffset:flatbuffers.Offset, commithashOffset:flatbuffers.Offset, branchOffset:flatbuffers.Offset, timestampOffset:flatbuffers.Offset):flatbuffers.Offset {
  BundleSignature.startBundleSignature(builder);
  BundleSignature.addMode(builder, modeOffset);
  BundleSignature.addVersion(builder, versionOffset);
  BundleSignature.addCommithash(builder, commithashOffset);
  BundleSignature.addBranch(builder, branchOffset);
  BundleSignature.addTimestamp(builder, timestampOffset);
  return BundleSignature.endBundleSignature(builder);
}

unpack(): BundleSignatureT {
  return new BundleSignatureT(
    this.mode(),
    this.version(),
    this.commithash(),
    this.branch(),
    this.timestamp()
  );
}


unpackTo(_o: BundleSignatureT): void {
  _o.mode = this.mode();
  _o.version = this.version();
  _o.commithash = this.commithash();
  _o.branch = this.branch();
  _o.timestamp = this.timestamp();
}
}

export class BundleSignatureT {
constructor(
  public mode: string|Uint8Array|null = null,
  public version: string|Uint8Array|null = null,
  public commithash: string|Uint8Array|null = null,
  public branch: string|Uint8Array|null = null,
  public timestamp: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mode = (this.mode !== null ? builder.createString(this.mode!) : 0);
  const version = (this.version !== null ? builder.createString(this.version!) : 0);
  const commithash = (this.commithash !== null ? builder.createString(this.commithash!) : 0);
  const branch = (this.branch !== null ? builder.createString(this.branch!) : 0);
  const timestamp = (this.timestamp !== null ? builder.createString(this.timestamp!) : 0);

  return BundleSignature.createBundleSignature(builder,
    mode,
    version,
    commithash,
    branch,
    timestamp
  );
}
}
