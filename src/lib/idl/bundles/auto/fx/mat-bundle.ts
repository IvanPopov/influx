// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MatRenderPass, MatRenderPassT } from '../fx/mat-render-pass';


export class MatBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MatBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMatBundle(bb:flatbuffers.ByteBuffer, obj?:MatBundle):MatBundle {
  return (obj || new MatBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMatBundle(bb:flatbuffers.ByteBuffer, obj?:MatBundle):MatBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

renderPasses(index: number, obj?:MatRenderPass):MatRenderPass|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MatRenderPass()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

renderPassesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMatBundle(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRenderPasses(builder:flatbuffers.Builder, renderPassesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, renderPassesOffset, 0);
}

static createRenderPassesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRenderPassesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMatBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMatBundle(builder:flatbuffers.Builder, renderPassesOffset:flatbuffers.Offset):flatbuffers.Offset {
  MatBundle.startMatBundle(builder);
  MatBundle.addRenderPasses(builder, renderPassesOffset);
  return MatBundle.endMatBundle(builder);
}

unpack(): MatBundleT {
  return new MatBundleT(
    this.bb!.createObjList(this.renderPasses.bind(this), this.renderPassesLength())
  );
}


unpackTo(_o: MatBundleT): void {
  _o.renderPasses = this.bb!.createObjList(this.renderPasses.bind(this), this.renderPassesLength());
}
}

export class MatBundleT {
constructor(
  public renderPasses: (MatRenderPassT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const renderPasses = MatBundle.createRenderPassesVector(builder, builder.createObjectOffsetList(this.renderPasses));

  return MatBundle.createMatBundle(builder,
    renderPasses
  );
}
}
