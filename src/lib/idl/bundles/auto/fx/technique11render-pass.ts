// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PixelShader, PixelShaderT } from '../fx/pixel-shader';
import { Shader, unionToShader, unionListToShader } from '../fx/shader';
import { VertexShader, VertexShaderT } from '../fx/vertex-shader';


export class Technique11RenderPass {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Technique11RenderPass {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTechnique11RenderPass(bb:flatbuffers.ByteBuffer, obj?:Technique11RenderPass):Technique11RenderPass {
  return (obj || new Technique11RenderPass()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTechnique11RenderPass(bb:flatbuffers.ByteBuffer, obj?:Technique11RenderPass):Technique11RenderPass {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Technique11RenderPass()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

codeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

codeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

shadersType(index: number):Shader|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

shadersTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shadersTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

shaders(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

shadersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTechnique11RenderPass(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, codeOffset, 0);
}

static createCodeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addShadersType(builder:flatbuffers.Builder, shadersTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shadersTypeOffset, 0);
}

static createShadersTypeVector(builder:flatbuffers.Builder, data:Shader[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startShadersTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addShaders(builder:flatbuffers.Builder, shadersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, shadersOffset, 0);
}

static createShadersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShadersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTechnique11RenderPass(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTechnique11RenderPass(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset, shadersTypeOffset:flatbuffers.Offset, shadersOffset:flatbuffers.Offset):flatbuffers.Offset {
  Technique11RenderPass.startTechnique11RenderPass(builder);
  Technique11RenderPass.addCode(builder, codeOffset);
  Technique11RenderPass.addShadersType(builder, shadersTypeOffset);
  Technique11RenderPass.addShaders(builder, shadersOffset);
  return Technique11RenderPass.endTechnique11RenderPass(builder);
}

unpack(): Technique11RenderPassT {
  return new Technique11RenderPassT(
    this.bb!.createScalarList(this.code.bind(this), this.codeLength()),
    this.bb!.createScalarList(this.shadersType.bind(this), this.shadersTypeLength()),
    (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.shadersTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.shadersType(targetEnumIndex);
      if(targetEnum === null || Shader[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToShader(targetEnum, this.shaders.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })()
  );
}


unpackTo(_o: Technique11RenderPassT): void {
  _o.code = this.bb!.createScalarList(this.code.bind(this), this.codeLength());
  _o.shadersType = this.bb!.createScalarList(this.shadersType.bind(this), this.shadersTypeLength());
  _o.shaders = (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.shadersTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.shadersType(targetEnumIndex);
      if(targetEnum === null || Shader[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToShader(targetEnum, this.shaders.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })();
}
}

export class Technique11RenderPassT {
constructor(
  public code: (number)[] = [],
  public shadersType: (Shader)[] = [],
  public shaders: (PixelShaderT|VertexShaderT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const code = Technique11RenderPass.createCodeVector(builder, this.code);
  const shadersType = Technique11RenderPass.createShadersTypeVector(builder, this.shadersType);
  const shaders = Technique11RenderPass.createShadersVector(builder, builder.createObjectOffsetList(this.shaders));

  return Technique11RenderPass.createTechnique11RenderPass(builder,
    code,
    shadersType,
    shaders
  );
}
}
