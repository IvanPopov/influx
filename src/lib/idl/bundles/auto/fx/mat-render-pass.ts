// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RenderState, RenderStateT } from '../fx/render-state';
import { RoutineBundle, unionToRoutineBundle, unionListToRoutineBundle } from '../fx/routine-bundle';
import { RoutineBytecodeBundle, RoutineBytecodeBundleT } from '../fx/routine-bytecode-bundle';
import { RoutineShaderBundle, RoutineShaderBundleT } from '../fx/routine-shader-bundle';
import { TypeLayout, TypeLayoutT } from '../type-layout';


export class MatRenderPass {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MatRenderPass {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMatRenderPass(bb:flatbuffers.ByteBuffer, obj?:MatRenderPass):MatRenderPass {
  return (obj || new MatRenderPass()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMatRenderPass(bb:flatbuffers.ByteBuffer, obj?:MatRenderPass):MatRenderPass {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatRenderPass()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

routinesType(index: number):RoutineBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

routinesTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

routinesTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

routines(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

routinesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

instance(obj?:TypeLayout):TypeLayout|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new TypeLayout()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stride():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

renderStates(index: number, obj?:RenderState):RenderState|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new RenderState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

renderStatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMatRenderPass(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addRoutinesType(builder:flatbuffers.Builder, routinesTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, routinesTypeOffset, 0);
}

static createRoutinesTypeVector(builder:flatbuffers.Builder, data:RoutineBundle[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startRoutinesTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addRoutines(builder:flatbuffers.Builder, routinesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, routinesOffset, 0);
}

static createRoutinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRoutinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInstance(builder:flatbuffers.Builder, instanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, instanceOffset, 0);
}

static addStride(builder:flatbuffers.Builder, stride:number) {
  builder.addFieldInt32(3, stride, 0);
}

static addRenderStates(builder:flatbuffers.Builder, renderStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, renderStatesOffset, 0);
}

static createRenderStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRenderStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMatRenderPass(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): MatRenderPassT {
  return new MatRenderPassT(
    this.bb!.createScalarList(this.routinesType.bind(this), this.routinesTypeLength()),
    (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.routinesTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.routinesType(targetEnumIndex);
      if(targetEnum === null || RoutineBundle[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToRoutineBundle(targetEnum, this.routines.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })(),
    (this.instance() !== null ? this.instance()!.unpack() : null),
    this.stride(),
    this.bb!.createObjList(this.renderStates.bind(this), this.renderStatesLength())
  );
}


unpackTo(_o: MatRenderPassT): void {
  _o.routinesType = this.bb!.createScalarList(this.routinesType.bind(this), this.routinesTypeLength());
  _o.routines = (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.routinesTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.routinesType(targetEnumIndex);
      if(targetEnum === null || RoutineBundle[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToRoutineBundle(targetEnum, this.routines.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })();
  _o.instance = (this.instance() !== null ? this.instance()!.unpack() : null);
  _o.stride = this.stride();
  _o.renderStates = this.bb!.createObjList(this.renderStates.bind(this), this.renderStatesLength());
}
}

export class MatRenderPassT {
constructor(
  public routinesType: (RoutineBundle)[] = [],
  public routines: (RoutineBytecodeBundleT|RoutineShaderBundleT)[] = [],
  public instance: TypeLayoutT|null = null,
  public stride: number = 0,
  public renderStates: (RenderStateT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const routinesType = MatRenderPass.createRoutinesTypeVector(builder, this.routinesType);
  const routines = MatRenderPass.createRoutinesVector(builder, builder.createObjectOffsetList(this.routines));
  const instance = (this.instance !== null ? this.instance!.pack(builder) : 0);
  const renderStates = MatRenderPass.createRenderStatesVector(builder, builder.createObjectOffsetList(this.renderStates));

  MatRenderPass.startMatRenderPass(builder);
  MatRenderPass.addRoutinesType(builder, routinesType);
  MatRenderPass.addRoutines(builder, routines);
  MatRenderPass.addInstance(builder, instance);
  MatRenderPass.addStride(builder, this.stride);
  MatRenderPass.addRenderStates(builder, renderStates);

  return MatRenderPass.endMatRenderPass(builder);
}
}
