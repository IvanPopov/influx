// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RoutineGLSLSourceBundle, RoutineGLSLSourceBundleT } from '../fx/routine-glslsource-bundle';
import { RoutineHLSLSourceBundle, RoutineHLSLSourceBundleT } from '../fx/routine-hlslsource-bundle';
import { RoutineSourceBundle, unionToRoutineSourceBundle, unionListToRoutineSourceBundle } from '../fx/routine-source-bundle';


export class RoutineShaderBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RoutineShaderBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRoutineShaderBundle(bb:flatbuffers.ByteBuffer, obj?:RoutineShaderBundle):RoutineShaderBundle {
  return (obj || new RoutineShaderBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRoutineShaderBundle(bb:flatbuffers.ByteBuffer, obj?:RoutineShaderBundle):RoutineShaderBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RoutineShaderBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shadersType(index: number):RoutineSourceBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

shadersTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shadersTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

shaders(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

shadersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRoutineShaderBundle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addShadersType(builder:flatbuffers.Builder, shadersTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, shadersTypeOffset, 0);
}

static createShadersTypeVector(builder:flatbuffers.Builder, data:RoutineSourceBundle[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startShadersTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addShaders(builder:flatbuffers.Builder, shadersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shadersOffset, 0);
}

static createShadersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShadersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRoutineShaderBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRoutineShaderBundle(builder:flatbuffers.Builder, shadersTypeOffset:flatbuffers.Offset, shadersOffset:flatbuffers.Offset):flatbuffers.Offset {
  RoutineShaderBundle.startRoutineShaderBundle(builder);
  RoutineShaderBundle.addShadersType(builder, shadersTypeOffset);
  RoutineShaderBundle.addShaders(builder, shadersOffset);
  return RoutineShaderBundle.endRoutineShaderBundle(builder);
}

unpack(): RoutineShaderBundleT {
  return new RoutineShaderBundleT(
    this.bb!.createScalarList(this.shadersType.bind(this), this.shadersTypeLength()),
    (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.shadersTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.shadersType(targetEnumIndex);
      if(targetEnum === null || RoutineSourceBundle[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToRoutineSourceBundle(targetEnum, this.shaders.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })()
  );
}


unpackTo(_o: RoutineShaderBundleT): void {
  _o.shadersType = this.bb!.createScalarList(this.shadersType.bind(this), this.shadersTypeLength());
  _o.shaders = (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.shadersTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.shadersType(targetEnumIndex);
      if(targetEnum === null || RoutineSourceBundle[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToRoutineSourceBundle(targetEnum, this.shaders.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })();
}
}

export class RoutineShaderBundleT {
constructor(
  public shadersType: (RoutineSourceBundle)[] = [],
  public shaders: (RoutineGLSLSourceBundleT|RoutineHLSLSourceBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const shadersType = RoutineShaderBundle.createShadersTypeVector(builder, this.shadersType);
  const shaders = RoutineShaderBundle.createShadersVector(builder, builder.createObjectOffsetList(this.shaders));

  return RoutineShaderBundle.createRoutineShaderBundle(builder,
    shadersType,
    shaders
  );
}
}
