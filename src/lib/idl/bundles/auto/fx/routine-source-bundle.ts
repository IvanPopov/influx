// automatically generated by the FlatBuffers compiler, do not modify

import { RoutineGLSLSourceBundle, RoutineGLSLSourceBundleT } from '../fx/routine-glslsource-bundle';
import { RoutineHLSLSourceBundle, RoutineHLSLSourceBundleT } from '../fx/routine-hlslsource-bundle';


export enum RoutineSourceBundle {
  NONE = 0,
  RoutineGLSLSourceBundle = 1,
  RoutineHLSLSourceBundle = 2
}

export function unionToRoutineSourceBundle(
  type: RoutineSourceBundle,
  accessor: (obj:RoutineGLSLSourceBundle|RoutineHLSLSourceBundle) => RoutineGLSLSourceBundle|RoutineHLSLSourceBundle|null
): RoutineGLSLSourceBundle|RoutineHLSLSourceBundle|null {
  switch(RoutineSourceBundle[type]) {
    case 'NONE': return null; 
    case 'RoutineGLSLSourceBundle': return accessor(new RoutineGLSLSourceBundle())! as RoutineGLSLSourceBundle;
    case 'RoutineHLSLSourceBundle': return accessor(new RoutineHLSLSourceBundle())! as RoutineHLSLSourceBundle;
    default: return null;
  }
}

export function unionListToRoutineSourceBundle(
  type: RoutineSourceBundle, 
  accessor: (index: number, obj:RoutineGLSLSourceBundle|RoutineHLSLSourceBundle) => RoutineGLSLSourceBundle|RoutineHLSLSourceBundle|null, 
  index: number
): RoutineGLSLSourceBundle|RoutineHLSLSourceBundle|null {
  switch(RoutineSourceBundle[type]) {
    case 'NONE': return null; 
    case 'RoutineGLSLSourceBundle': return accessor(index, new RoutineGLSLSourceBundle())! as RoutineGLSLSourceBundle;
    case 'RoutineHLSLSourceBundle': return accessor(index, new RoutineHLSLSourceBundle())! as RoutineHLSLSourceBundle;
    default: return null;
  }
}
