// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Bundle, BundleT } from '../fx/bundle';


export class BundleCollection {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BundleCollection {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBundleCollection(bb:flatbuffers.ByteBuffer, obj?:BundleCollection):BundleCollection {
  return (obj || new BundleCollection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBundleCollection(bb:flatbuffers.ByteBuffer, obj?:BundleCollection):BundleCollection {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BundleCollection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

content(index: number, obj?:Bundle):Bundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Bundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

contentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startBundleCollection(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contentOffset, 0);
}

static createContentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startContentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endBundleCollection(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBundleCollection(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset):flatbuffers.Offset {
  BundleCollection.startBundleCollection(builder);
  BundleCollection.addContent(builder, contentOffset);
  return BundleCollection.endBundleCollection(builder);
}

unpack(): BundleCollectionT {
  return new BundleCollectionT(
    this.bb!.createObjList(this.content.bind(this), this.contentLength())
  );
}


unpackTo(_o: BundleCollectionT): void {
  _o.content = this.bb!.createObjList(this.content.bind(this), this.contentLength());
}
}

export class BundleCollectionT {
constructor(
  public content: (BundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const content = BundleCollection.createContentVector(builder, builder.createObjectOffsetList(this.content));

  return BundleCollection.createBundleCollection(builder,
    content
  );
}
}
