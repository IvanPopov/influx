// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PartRenderPass, PartRenderPassT } from '../fx/part-render-pass';
import { RoutineBundle, unionToRoutineBundle, unionListToRoutineBundle } from '../fx/routine-bundle';
import { RoutineBytecodeBundle, RoutineBytecodeBundleT } from '../fx/routine-bytecode-bundle';
import { RoutineShaderBundle, RoutineShaderBundleT } from '../fx/routine-shader-bundle';
import { TypeLayout, TypeLayoutT } from '../type-layout';


export class PartBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PartBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPartBundle(bb:flatbuffers.ByteBuffer, obj?:PartBundle):PartBundle {
  return (obj || new PartBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPartBundle(bb:flatbuffers.ByteBuffer, obj?:PartBundle):PartBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PartBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

capacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

simulationRoutinesType(index: number):RoutineBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

simulationRoutinesTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

simulationRoutinesTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

simulationRoutines(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

simulationRoutinesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

renderPasses(index: number, obj?:PartRenderPass):PartRenderPass|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new PartRenderPass()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

renderPassesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

particle(obj?:TypeLayout):TypeLayout|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new TypeLayout()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPartBundle(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCapacity(builder:flatbuffers.Builder, capacity:number) {
  builder.addFieldInt32(0, capacity, 0);
}

static addSimulationRoutinesType(builder:flatbuffers.Builder, simulationRoutinesTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, simulationRoutinesTypeOffset, 0);
}

static createSimulationRoutinesTypeVector(builder:flatbuffers.Builder, data:RoutineBundle[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSimulationRoutinesTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSimulationRoutines(builder:flatbuffers.Builder, simulationRoutinesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, simulationRoutinesOffset, 0);
}

static createSimulationRoutinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSimulationRoutinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRenderPasses(builder:flatbuffers.Builder, renderPassesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, renderPassesOffset, 0);
}

static createRenderPassesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRenderPassesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addParticle(builder:flatbuffers.Builder, particleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, particleOffset, 0);
}

static endPartBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PartBundleT {
  return new PartBundleT(
    this.capacity(),
    this.bb!.createScalarList(this.simulationRoutinesType.bind(this), this.simulationRoutinesTypeLength()),
    (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.simulationRoutinesTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.simulationRoutinesType(targetEnumIndex);
      if(targetEnum === null || RoutineBundle[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToRoutineBundle(targetEnum, this.simulationRoutines.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })(),
    this.bb!.createObjList(this.renderPasses.bind(this), this.renderPassesLength()),
    (this.particle() !== null ? this.particle()!.unpack() : null)
  );
}


unpackTo(_o: PartBundleT): void {
  _o.capacity = this.capacity();
  _o.simulationRoutinesType = this.bb!.createScalarList(this.simulationRoutinesType.bind(this), this.simulationRoutinesTypeLength());
  _o.simulationRoutines = (() => {
    let ret = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.simulationRoutinesTypeLength(); ++targetEnumIndex) {
      let targetEnum = this.simulationRoutinesType(targetEnumIndex);
      if(targetEnum === null || RoutineBundle[targetEnum!] === 'NONE') { continue; }

      let temp = unionListToRoutineBundle(targetEnum, this.simulationRoutines.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })();
  _o.renderPasses = this.bb!.createObjList(this.renderPasses.bind(this), this.renderPassesLength());
  _o.particle = (this.particle() !== null ? this.particle()!.unpack() : null);
}
}

export class PartBundleT {
constructor(
  public capacity: number = 0,
  public simulationRoutinesType: (RoutineBundle)[] = [],
  public simulationRoutines: (RoutineBytecodeBundleT|RoutineShaderBundleT)[] = [],
  public renderPasses: (PartRenderPassT)[] = [],
  public particle: TypeLayoutT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const simulationRoutinesType = PartBundle.createSimulationRoutinesTypeVector(builder, this.simulationRoutinesType);
  const simulationRoutines = PartBundle.createSimulationRoutinesVector(builder, builder.createObjectOffsetList(this.simulationRoutines));
  const renderPasses = PartBundle.createRenderPassesVector(builder, builder.createObjectOffsetList(this.renderPasses));
  const particle = (this.particle !== null ? this.particle!.pack(builder) : 0);

  PartBundle.startPartBundle(builder);
  PartBundle.addCapacity(builder, this.capacity);
  PartBundle.addSimulationRoutinesType(builder, simulationRoutinesType);
  PartBundle.addSimulationRoutines(builder, simulationRoutines);
  PartBundle.addRenderPasses(builder, renderPasses);
  PartBundle.addParticle(builder, particle);

  return PartBundle.endPartBundle(builder);
}
}
