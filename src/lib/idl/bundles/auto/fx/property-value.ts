// automatically generated by the FlatBuffers compiler, do not modify

import { BoolValue, BoolValueT } from '../fx/bool-value';
import { FloatValue, FloatValueT } from '../fx/float-value';
import { IntValue, IntValueT } from '../fx/int-value';
import { StringValue, StringValueT } from '../fx/string-value';
import { UintValue, UintValueT } from '../fx/uint-value';


export enum PropertyValue {
  NONE = 0,
  BoolValue = 1,
  UintValue = 2,
  IntValue = 3,
  FloatValue = 4,
  StringValue = 5
}

export function unionToPropertyValue(
  type: PropertyValue,
  accessor: (obj:BoolValue|FloatValue|IntValue|StringValue|UintValue) => BoolValue|FloatValue|IntValue|StringValue|UintValue|null
): BoolValue|FloatValue|IntValue|StringValue|UintValue|null {
  switch(PropertyValue[type]) {
    case 'NONE': return null; 
    case 'BoolValue': return accessor(new BoolValue())! as BoolValue;
    case 'UintValue': return accessor(new UintValue())! as UintValue;
    case 'IntValue': return accessor(new IntValue())! as IntValue;
    case 'FloatValue': return accessor(new FloatValue())! as FloatValue;
    case 'StringValue': return accessor(new StringValue())! as StringValue;
    default: return null;
  }
}

export function unionListToPropertyValue(
  type: PropertyValue, 
  accessor: (index: number, obj:BoolValue|FloatValue|IntValue|StringValue|UintValue) => BoolValue|FloatValue|IntValue|StringValue|UintValue|null, 
  index: number
): BoolValue|FloatValue|IntValue|StringValue|UintValue|null {
  switch(PropertyValue[type]) {
    case 'NONE': return null; 
    case 'BoolValue': return accessor(index, new BoolValue())! as BoolValue;
    case 'UintValue': return accessor(index, new UintValue())! as UintValue;
    case 'IntValue': return accessor(index, new IntValue())! as IntValue;
    case 'FloatValue': return accessor(index, new FloatValue())! as FloatValue;
    case 'StringValue': return accessor(index, new StringValue())! as StringValue;
    default: return null;
  }
}
