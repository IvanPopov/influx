// automatically generated by the FlatBuffers compiler, do not modify

import { ColorValue, ColorValueT } from '../fx/color-value';
import { Float2Value, Float2ValueT } from '../fx/float2value';
import { Float3Value, Float3ValueT } from '../fx/float3value';
import { Float4Value, Float4ValueT } from '../fx/float4value';
import { FloatValue, FloatValueT } from '../fx/float-value';
import { IntValue, IntValueT } from '../fx/int-value';
import { MeshValue, MeshValueT } from '../fx/mesh-value';
import { TextureValue, TextureValueT } from '../fx/texture-value';
import { UintValue, UintValueT } from '../fx/uint-value';


export enum ControlValue {
  NONE = 0,
  UintValue = 1,
  IntValue = 2,
  FloatValue = 3,
  Float2Value = 4,
  Float3Value = 5,
  Float4Value = 6,
  ColorValue = 7,
  TextureValue = 8,
  MeshValue = 9
}

export function unionToControlValue(
  type: ControlValue,
  accessor: (obj:ColorValue|Float2Value|Float3Value|Float4Value|FloatValue|IntValue|MeshValue|TextureValue|UintValue) => ColorValue|Float2Value|Float3Value|Float4Value|FloatValue|IntValue|MeshValue|TextureValue|UintValue|null
): ColorValue|Float2Value|Float3Value|Float4Value|FloatValue|IntValue|MeshValue|TextureValue|UintValue|null {
  switch(ControlValue[type]) {
    case 'NONE': return null; 
    case 'UintValue': return accessor(new UintValue())! as UintValue;
    case 'IntValue': return accessor(new IntValue())! as IntValue;
    case 'FloatValue': return accessor(new FloatValue())! as FloatValue;
    case 'Float2Value': return accessor(new Float2Value())! as Float2Value;
    case 'Float3Value': return accessor(new Float3Value())! as Float3Value;
    case 'Float4Value': return accessor(new Float4Value())! as Float4Value;
    case 'ColorValue': return accessor(new ColorValue())! as ColorValue;
    case 'TextureValue': return accessor(new TextureValue())! as TextureValue;
    case 'MeshValue': return accessor(new MeshValue())! as MeshValue;
    default: return null;
  }
}

export function unionListToControlValue(
  type: ControlValue, 
  accessor: (index: number, obj:ColorValue|Float2Value|Float3Value|Float4Value|FloatValue|IntValue|MeshValue|TextureValue|UintValue) => ColorValue|Float2Value|Float3Value|Float4Value|FloatValue|IntValue|MeshValue|TextureValue|UintValue|null, 
  index: number
): ColorValue|Float2Value|Float3Value|Float4Value|FloatValue|IntValue|MeshValue|TextureValue|UintValue|null {
  switch(ControlValue[type]) {
    case 'NONE': return null; 
    case 'UintValue': return accessor(index, new UintValue())! as UintValue;
    case 'IntValue': return accessor(index, new IntValue())! as IntValue;
    case 'FloatValue': return accessor(index, new FloatValue())! as FloatValue;
    case 'Float2Value': return accessor(index, new Float2Value())! as Float2Value;
    case 'Float3Value': return accessor(index, new Float3Value())! as Float3Value;
    case 'Float4Value': return accessor(index, new Float4Value())! as Float4Value;
    case 'ColorValue': return accessor(index, new ColorValue())! as ColorValue;
    case 'TextureValue': return accessor(index, new TextureValue())! as TextureValue;
    case 'MeshValue': return accessor(index, new MeshValue())! as MeshValue;
    default: return null;
  }
}
