// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TypeField, TypeFieldT } from './type-field';


export class CBBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CBBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCBBundle(bb:flatbuffers.ByteBuffer, obj?:CBBundle):CBBundle {
  return (obj || new CBBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCBBundle(bb:flatbuffers.ByteBuffer, obj?:CBBundle):CBBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CBBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

slot():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

fields(index: number, obj?:TypeField):TypeField|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TypeField()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCBBundle(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addSlot(builder:flatbuffers.Builder, slot:number) {
  builder.addFieldInt32(1, slot, 0);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldInt32(2, size, 0);
}

static addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fieldsOffset, 0);
}

static createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCBBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCBBundle(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, slot:number, size:number, fieldsOffset:flatbuffers.Offset):flatbuffers.Offset {
  CBBundle.startCBBundle(builder);
  CBBundle.addName(builder, nameOffset);
  CBBundle.addSlot(builder, slot);
  CBBundle.addSize(builder, size);
  CBBundle.addFields(builder, fieldsOffset);
  return CBBundle.endCBBundle(builder);
}

unpack(): CBBundleT {
  return new CBBundleT(
    this.name(),
    this.slot(),
    this.size(),
    this.bb!.createObjList(this.fields.bind(this), this.fieldsLength())
  );
}


unpackTo(_o: CBBundleT): void {
  _o.name = this.name();
  _o.slot = this.slot();
  _o.size = this.size();
  _o.fields = this.bb!.createObjList(this.fields.bind(this), this.fieldsLength());
}
}

export class CBBundleT {
constructor(
  public name: string|Uint8Array|null = null,
  public slot: number = 0,
  public size: number = 0,
  public fields: (TypeFieldT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const fields = CBBundle.createFieldsVector(builder, builder.createObjectOffsetList(this.fields));

  return CBBundle.createCBBundle(builder,
    name,
    this.slot,
    this.size,
    fields
  );
}
}
