// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UAV_H_
#define FLATBUFFERS_GENERATED_UAV_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "type_generated.h"

struct UAVBundle;
struct UAVBundleBuilder;
struct UAVBundleT;

struct UAVBundleT : public flatbuffers::NativeTable {
  typedef UAVBundle TableType;
  std::string name{};
  uint32_t slot = 0;
  uint32_t stride = 0;
  std::unique_ptr<TypeLayoutT> type{};
  UAVBundleT() = default;
  UAVBundleT(const UAVBundleT &o);
  UAVBundleT(UAVBundleT&&) FLATBUFFERS_NOEXCEPT = default;
  UAVBundleT &operator=(UAVBundleT o) FLATBUFFERS_NOEXCEPT;
};

struct UAVBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UAVBundleT NativeTableType;
  typedef UAVBundleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SLOT = 6,
    VT_STRIDE = 8,
    VT_TYPE = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t slot() const {
    return GetField<uint32_t>(VT_SLOT, 0);
  }
  uint32_t stride() const {
    return GetField<uint32_t>(VT_STRIDE, 0);
  }
  const TypeLayout *type() const {
    return GetPointer<const TypeLayout *>(VT_TYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_SLOT, 4) &&
           VerifyField<uint32_t>(verifier, VT_STRIDE, 4) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
  UAVBundleT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UAVBundleT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<UAVBundle> Pack(flatbuffers::FlatBufferBuilder &_fbb, const UAVBundleT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UAVBundleBuilder {
  typedef UAVBundle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(UAVBundle::VT_NAME, name);
  }
  void add_slot(uint32_t slot) {
    fbb_.AddElement<uint32_t>(UAVBundle::VT_SLOT, slot, 0);
  }
  void add_stride(uint32_t stride) {
    fbb_.AddElement<uint32_t>(UAVBundle::VT_STRIDE, stride, 0);
  }
  void add_type(flatbuffers::Offset<TypeLayout> type) {
    fbb_.AddOffset(UAVBundle::VT_TYPE, type);
  }
  explicit UAVBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UAVBundle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UAVBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<UAVBundle> CreateUAVBundle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t slot = 0,
    uint32_t stride = 0,
    flatbuffers::Offset<TypeLayout> type = 0) {
  UAVBundleBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_stride(stride);
  builder_.add_slot(slot);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<UAVBundle> CreateUAVBundleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t slot = 0,
    uint32_t stride = 0,
    flatbuffers::Offset<TypeLayout> type = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreateUAVBundle(
      _fbb,
      name__,
      slot,
      stride,
      type);
}

flatbuffers::Offset<UAVBundle> CreateUAVBundle(flatbuffers::FlatBufferBuilder &_fbb, const UAVBundleT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline UAVBundleT::UAVBundleT(const UAVBundleT &o)
      : name(o.name),
        slot(o.slot),
        stride(o.stride),
        type((o.type) ? new TypeLayoutT(*o.type) : nullptr) {
}

inline UAVBundleT &UAVBundleT::operator=(UAVBundleT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(slot, o.slot);
  std::swap(stride, o.stride);
  std::swap(type, o.type);
  return *this;
}

inline UAVBundleT *UAVBundle::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UAVBundleT>(new UAVBundleT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UAVBundle::UnPackTo(UAVBundleT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = slot(); _o->slot = _e; }
  { auto _e = stride(); _o->stride = _e; }
  { auto _e = type(); if (_e) _o->type = std::unique_ptr<TypeLayoutT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<UAVBundle> UAVBundle::Pack(flatbuffers::FlatBufferBuilder &_fbb, const UAVBundleT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUAVBundle(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<UAVBundle> CreateUAVBundle(flatbuffers::FlatBufferBuilder &_fbb, const UAVBundleT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const UAVBundleT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _slot = _o->slot;
  auto _stride = _o->stride;
  auto _type = _o->type ? CreateTypeLayout(_fbb, _o->type.get(), _rehasher) : 0;
  return CreateUAVBundle(
      _fbb,
      _name,
      _slot,
      _stride,
      _type);
}

#endif  // FLATBUFFERS_GENERATED_UAV_H_
