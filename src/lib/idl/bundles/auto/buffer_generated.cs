// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BufferBundle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BufferBundle GetRootAsBufferBundle(ByteBuffer _bb) { return GetRootAsBufferBundle(_bb, new BufferBundle()); }
  public static BufferBundle GetRootAsBufferBundle(ByteBuffer _bb, BufferBundle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BufferBundle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public uint Slot { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Stride { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public TypeLayout? Type { get { int o = __p.__offset(10); return o != 0 ? (TypeLayout?)(new TypeLayout()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BufferBundle> CreateBufferBundle(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      uint slot = 0,
      uint stride = 0,
      Offset<TypeLayout> typeOffset = default(Offset<TypeLayout>)) {
    builder.StartTable(4);
    BufferBundle.AddType(builder, typeOffset);
    BufferBundle.AddStride(builder, stride);
    BufferBundle.AddSlot(builder, slot);
    BufferBundle.AddName(builder, nameOffset);
    return BufferBundle.EndBufferBundle(builder);
  }

  public static void StartBufferBundle(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddSlot(FlatBufferBuilder builder, uint slot) { builder.AddUint(1, slot, 0); }
  public static void AddStride(FlatBufferBuilder builder, uint stride) { builder.AddUint(2, stride, 0); }
  public static void AddType(FlatBufferBuilder builder, Offset<TypeLayout> typeOffset) { builder.AddOffset(3, typeOffset.Value, 0); }
  public static Offset<BufferBundle> EndBufferBundle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BufferBundle>(o);
  }
  public BufferBundleT UnPack() {
    var _o = new BufferBundleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BufferBundleT _o) {
    _o.Name = this.Name;
    _o.Slot = this.Slot;
    _o.Stride = this.Stride;
    _o.Type = this.Type.HasValue ? this.Type.Value.UnPack() : null;
  }
  public static Offset<BufferBundle> Pack(FlatBufferBuilder builder, BufferBundleT _o) {
    if (_o == null) return default(Offset<BufferBundle>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(Offset<TypeLayout>) : TypeLayout.Pack(builder, _o.Type);
    return CreateBufferBundle(
      builder,
      _name,
      _o.Slot,
      _o.Stride,
      _type);
  }
}

public class BufferBundleT
{
  public string Name { get; set; }
  public uint Slot { get; set; }
  public uint Stride { get; set; }
  public TypeLayoutT Type { get; set; }

  public BufferBundleT() {
    this.Name = null;
    this.Slot = 0;
    this.Stride = 0;
    this.Type = null;
  }
}

