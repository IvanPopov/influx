// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TypeField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TypeField GetRootAsTypeField(ByteBuffer _bb) { return GetRootAsTypeField(_bb, new TypeField()); }
  public static TypeField GetRootAsTypeField(ByteBuffer _bb, TypeField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TypeField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TypeLayout? Type { get { int o = __p.__offset(4); return o != 0 ? (TypeLayout?)(new TypeLayout()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Semantic { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSemanticBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSemanticBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSemanticArray() { return __p.__vector_as_array<byte>(8); }
  public uint Size { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Padding { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<TypeField> CreateTypeField(FlatBufferBuilder builder,
      Offset<TypeLayout> typeOffset = default(Offset<TypeLayout>),
      StringOffset nameOffset = default(StringOffset),
      StringOffset semanticOffset = default(StringOffset),
      uint size = 0,
      uint padding = 0) {
    builder.StartTable(5);
    TypeField.AddPadding(builder, padding);
    TypeField.AddSize(builder, size);
    TypeField.AddSemantic(builder, semanticOffset);
    TypeField.AddName(builder, nameOffset);
    TypeField.AddType(builder, typeOffset);
    return TypeField.EndTypeField(builder);
  }

  public static void StartTypeField(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddType(FlatBufferBuilder builder, Offset<TypeLayout> typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSemantic(FlatBufferBuilder builder, StringOffset semanticOffset) { builder.AddOffset(2, semanticOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(3, size, 0); }
  public static void AddPadding(FlatBufferBuilder builder, uint padding) { builder.AddUint(4, padding, 0); }
  public static Offset<TypeField> EndTypeField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TypeField>(o);
  }
  public TypeFieldT UnPack() {
    var _o = new TypeFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TypeFieldT _o) {
    _o.Type = this.Type.HasValue ? this.Type.Value.UnPack() : null;
    _o.Name = this.Name;
    _o.Semantic = this.Semantic;
    _o.Size = this.Size;
    _o.Padding = this.Padding;
  }
  public static Offset<TypeField> Pack(FlatBufferBuilder builder, TypeFieldT _o) {
    if (_o == null) return default(Offset<TypeField>);
    var _type = _o.Type == null ? default(Offset<TypeLayout>) : TypeLayout.Pack(builder, _o.Type);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _semantic = _o.Semantic == null ? default(StringOffset) : builder.CreateString(_o.Semantic);
    return CreateTypeField(
      builder,
      _type,
      _name,
      _semantic,
      _o.Size,
      _o.Padding);
  }
}

public class TypeFieldT
{
  public TypeLayoutT Type { get; set; }
  public string Name { get; set; }
  public string Semantic { get; set; }
  public uint Size { get; set; }
  public uint Padding { get; set; }

  public TypeFieldT() {
    this.Type = null;
    this.Name = null;
    this.Semantic = null;
    this.Size = 0;
    this.Padding = 0;
  }
}

public struct TypeLayout : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TypeLayout GetRootAsTypeLayout(ByteBuffer _bb) { return GetRootAsTypeLayout(_bb, new TypeLayout()); }
  public static TypeLayout GetRootAsTypeLayout(ByteBuffer _bb, TypeLayout obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TypeLayout __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TypeField? Fields(int j) { int o = __p.__offset(4); return o != 0 ? (TypeField?)(new TypeField()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FieldsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Length { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public uint Size { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<TypeLayout> CreateTypeLayout(FlatBufferBuilder builder,
      VectorOffset fieldsOffset = default(VectorOffset),
      int length = 0,
      StringOffset nameOffset = default(StringOffset),
      uint size = 0) {
    builder.StartTable(4);
    TypeLayout.AddSize(builder, size);
    TypeLayout.AddName(builder, nameOffset);
    TypeLayout.AddLength(builder, length);
    TypeLayout.AddFields(builder, fieldsOffset);
    return TypeLayout.EndTypeLayout(builder);
  }

  public static void StartTypeLayout(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFields(FlatBufferBuilder builder, VectorOffset fieldsOffset) { builder.AddOffset(0, fieldsOffset.Value, 0); }
  public static VectorOffset CreateFieldsVector(FlatBufferBuilder builder, Offset<TypeField>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, Offset<TypeField>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<TypeField>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<TypeField>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFieldsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLength(FlatBufferBuilder builder, int length) { builder.AddInt(1, length, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(3, size, 0); }
  public static Offset<TypeLayout> EndTypeLayout(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TypeLayout>(o);
  }
  public TypeLayoutT UnPack() {
    var _o = new TypeLayoutT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TypeLayoutT _o) {
    _o.Fields = new List<TypeFieldT>();
    for (var _j = 0; _j < this.FieldsLength; ++_j) {_o.Fields.Add(this.Fields(_j).HasValue ? this.Fields(_j).Value.UnPack() : null);}
    _o.Length = this.Length;
    _o.Name = this.Name;
    _o.Size = this.Size;
  }
  public static Offset<TypeLayout> Pack(FlatBufferBuilder builder, TypeLayoutT _o) {
    if (_o == null) return default(Offset<TypeLayout>);
    var _fields = default(VectorOffset);
    if (_o.Fields != null) {
      var __fields = new Offset<TypeField>[_o.Fields.Count];
      for (var _j = 0; _j < __fields.Length; ++_j) { __fields[_j] = TypeField.Pack(builder, _o.Fields[_j]); }
      _fields = CreateFieldsVector(builder, __fields);
    }
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateTypeLayout(
      builder,
      _fields,
      _o.Length,
      _name,
      _o.Size);
  }
}

public class TypeLayoutT
{
  public List<TypeFieldT> Fields { get; set; }
  public int Length { get; set; }
  public string Name { get; set; }
  public uint Size { get; set; }

  public TypeLayoutT() {
    this.Fields = null;
    this.Length = 0;
    this.Name = null;
    this.Size = 0;
  }
}

