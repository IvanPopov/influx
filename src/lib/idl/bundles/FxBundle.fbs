namespace Fx;

table BundleSignature 
{
    mode: string;
    version: string;
    commithash: string;
    branch: string;
    timestamp: string;
}

table BundleMeta
{
    author: string;
    source: string;
}

table TypeField 
{
    type: TypeLayout;
    name: string; 
    semantic: string;
    size: uint; 
    padding: uint;
}

table TypeLayout 
{
    fields: [ TypeField ];
    length: int;
    name: string;
    size: uint;                 // byte length
}


table UAVBundle 
{
    name: string;
    slot: uint;
    stride: uint;
    type: TypeLayout;
}

table BufferBundle 
{
    name: string;
    slot: uint;
    stride: uint;
    type: TypeLayout;
}

table TextureBundle 
{
    name: string;
    slot: uint;
    stride: uint;
    type: TypeLayout;
}

table TrimeshBundle
{
    name: string;
    vertexCountUName: string;
    faceCountUName: string;
    verticesName: string;
    facesName: string;
    gsAdjecencyName: string;
    faceAdjacencyName: string;
}


table CBBundle
{
    name: string;
    slot: uint;
    size: uint;
    fields: [ TypeField ];
}

union RoutineBundle { RoutineBytecodeBundle, RoutineShaderBundle }

table GLSLAttribute 
{
    size: uint;
    offset: uint;
    name: string;
}

table RoutineBytecodeBundleResources
{
    uavs: [ UAVBundle ];
    buffers: [ BufferBundle ];
    textures: [ TextureBundle ];
    trimeshes: [ TrimeshBundle ];
}

table RoutineBytecodeBundle
{
    // code already includes chunks with constans, externs etc.
    code: [ ubyte ];
    resources: RoutineBytecodeBundleResources;
    numthreads: [ uint ];
}

table Pass11BytecodeBundle
{
    // code already includes chunks with constans, shaders, blend states etc.
    code: [ ubyte ];
}

table RoutineGLSLSourceBundle 
{
    code: string;
    // vertex bundles also contain attribute description
    attributes: [ GLSLAttribute ];

    // this is not complete reflection, 
    // only cbuffers direcly used by user (!)
    // resources from includes will not be presented here
    cbuffers: [ CBBundle ];
}



table RoutineHLSLSourceBundle 
{
    code: string;
    entryName: string;

    // this is not complete reflection, 
    // only cbuffers direcly used by user (!)
    // resources from includes will not be presented here
    cbuffers: [ CBBundle ];
}

union RoutineSourceBundle { RoutineGLSLSourceBundle, RoutineHLSLSourceBundle }

table RoutineShaderBundle
{
    shaders: [ RoutineSourceBundle ];
}

//
// Particles
//

enum EPartSimRoutines : short
{
    k_Reset,
    k_Spawn,
    k_Init,
    k_Update,
    k_Last
}

enum EPartRenderRoutines : short
{
    k_Prerender,
    k_Vertex,
    k_Pixel,
    k_Last
}

table PartRenderPass
{
    routines: [ RoutineBundle ];
    geometry: string;                       // template name
    sorting: bool;
    instanceCount: uint;
    stride: uint;                           // instance stride in 32bit (integers)
    instance: TypeLayout;
    renderStates: [ RenderState ];
}

table PartBundle
{
    capacity: uint;                         // maximum number of particles allowed (limited by user manually in the sandbox)
    simulationRoutines: [ RoutineBundle ];
    renderPasses: [ PartRenderPass ];
    particle: TypeLayout;
}

//
// Materials
//

enum EMatRenderRoutines : short
{
    k_Vertex,
    k_Pixel,
    k_Last
}

table RenderState {
    type: uint;
    value: uint;
}

table MatRenderPass
{
    routines: [ RoutineBundle ];
    
    // VS_OUTPUT test_z_vs(VS_INPUT_AUTO_I _input)
    //                     ^^^^^^^^^^^^^^^
    //                         instance
    instance: TypeLayout;
    // sizeof(instance) >> 2
    stride: uint;                           // instance stride in 32bit (integers)
    
    renderStates: [ RenderState ];
}

/** @deprecated */
table MatBundle
{
    renderPasses: [ MatRenderPass ];
}

table Technique11Bundle
{
    // todo
}

union BundleContent { PartBundle, MatBundle, Technique11Bundle }

table StringValue { value: string; }
table TextureValue { value: string; }
table MeshValue { value: string; }
struct UintValue { value: uint; }
struct IntValue { value: int; }
struct FloatValue { value: float; }
struct Float2Value { 
    x: float;
    y: float; 
}
struct Float3Value { 
    x: float;
    y: float;
    z: float;
}
struct Float4Value { 
    x: float;
    y: float;
    z: float;
    w: float;
}
struct ColorValue {
    r: ubyte;
    g: ubyte;
    b: ubyte;
    a: ubyte;
}

union PropertyValue { UintValue, IntValue, FloatValue, StringValue }
union ControlValue { UintValue, IntValue, FloatValue, Float2Value, Float3Value, Float4Value, ColorValue, TextureValue, MeshValue }

table ViewTypeProperty 
{
    name: string;
    value: PropertyValue;
}

table UIControl
{
    name: string;
    value: ControlValue;
    properties: [ ViewTypeProperty ];
}

table PresetEntry
{
	name: string;
	value: ControlValue;
}

table Preset 
{
    name: string;
    desc: string;
    data: [ PresetEntry ];
}

table Bundle 
{
    name: string;
    signature: BundleSignature;
    meta: BundleMeta;
    content: BundleContent;
    controls: [ UIControl ];
    presets: [ Preset ];
}

table BundleCollection
{
    content: [ Bundle ];
}


root_type BundleCollection;
root_type Bundle;
